{"version":3,"sources":["features/Configurations/Configurations.tsx"],"names":["breadcrumbItems","title","linkTo","translations","FeedbackValues","Object","values","Feedback","filter","x","Configurations","useConfig","configurations","updateConfigs","useState","isLoading","setIsLoading","Fetch","useFetch","AlertManager","useAlerts","useForm","mode","defaultValues","campaignMode","unansweredMaxAttemps","toString","answeringMachineMaxAttemps","answeringMachinePostponedDays","postponedButtonDays","nonExistentPostponedDays","reduce","acc","curr","hiddenButtons","split","includes","register","handleSubmit","errors","getValues","formState","isDirty","isValid","saveConfig","formData","a","payload","parseInt","entries","k","test","key","number","match","join","put","err","configs","show","campaignModeActive","name","position","variant","Container","className","items","Form","onSubmit","FormGroup","check","Label","Input","type","innerRef","CampaignLabel","active","length","validate","d","Row","map","i","Col","md","labels","Button","block","color","disabled","fulfill","styled","span","theme","text","colors","green","red"],"mappings":"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","file":"static/js/9.5bc175fb.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {\r\n  Container,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Form,\r\n  Button,\r\n  Row,\r\n  Col,\r\n} from 'reactstrap'\r\nimport styled from 'styled-components'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useConfig, useFetch } from 'hooks'\r\nimport { Configurations as TConfigurations, Feedback } from 'types'\r\nimport { Alert, Breadcrumb, Spinner, useAlerts } from 'components'\r\nimport { labels } from 'consts'\r\n\r\nconst breadcrumbItems = [\r\n  {\r\n    title: 'Panel de Administración',\r\n    linkTo: '/admin-panel',\r\n  },\r\n  {\r\n    title: 'Configuración de la App',\r\n  },\r\n]\r\n\r\nconst translations: Record<\r\n  Exclude<keyof TConfigurations, 'hiddenButtons'>,\r\n  string\r\n> = {\r\n  campaignMode: 'Modo de campaña',\r\n  unansweredMaxAttemps: 'Máximo de intentos para no en casa',\r\n  answeringMachineMaxAttemps: 'Máximo de intentos para el contestador',\r\n  answeringMachinePostponedDays:\r\n    'Días que se pospone un número al dejar un mensaje en el contestador',\r\n  postponedButtonDays:\r\n    'Días que se pospone un número al tocar el botón \"Aplazar\"',\r\n  nonExistentPostponedDays: 'Días que queda congelado un número inexistente',\r\n}\r\n\r\ntype EditableConfigurations = {\r\n  campaignMode: boolean\r\n  unansweredMaxAttemps: string\r\n  answeringMachineMaxAttemps: string\r\n  answeringMachinePostponedDays: string\r\n  postponedButtonDays: string\r\n  nonExistentPostponedDays: string\r\n  button0shown: boolean\r\n  button1shown: boolean\r\n  button2shown: boolean\r\n  button3shown: boolean\r\n  button4shown: boolean\r\n  button5shown: boolean\r\n  button6shown: boolean\r\n}\r\n\r\nconst FeedbackValues = Object.values(Feedback).filter(\r\n  (x) => typeof x === 'number'\r\n) as number[]\r\n\r\nconst Configurations: React.FC = () => {\r\n  const { configurations, updateConfigs } = useConfig()\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n  const Fetch = useFetch()\r\n  const { AlertManager } = useAlerts()\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    errors,\r\n    getValues,\r\n    formState: { isDirty, isValid },\r\n  } = useForm<EditableConfigurations>({\r\n    mode: 'all',\r\n    defaultValues: {\r\n      campaignMode: configurations.campaignMode,\r\n      unansweredMaxAttemps: configurations.unansweredMaxAttemps.toString(),\r\n      answeringMachineMaxAttemps: configurations.answeringMachineMaxAttemps.toString(),\r\n      answeringMachinePostponedDays: configurations.answeringMachinePostponedDays.toString(),\r\n      postponedButtonDays: configurations.postponedButtonDays.toString(),\r\n      nonExistentPostponedDays: configurations.nonExistentPostponedDays.toString(),\r\n      ...FeedbackValues.reduce(\r\n        (acc, curr) => ({\r\n          ...acc,\r\n          [`button${curr}shown`]: !configurations.hiddenButtons\r\n            .split(',')\r\n            .includes(curr.toString()),\r\n        }),\r\n        {}\r\n      ),\r\n    },\r\n  })\r\n\r\n  const saveConfig = async (formData: EditableConfigurations) => {\r\n    try {\r\n      setIsLoading(true)\r\n      const payload = {} as TConfigurations\r\n\r\n      payload.campaignMode = formData.campaignMode\r\n      payload.unansweredMaxAttemps = parseInt(formData.unansweredMaxAttemps)\r\n      payload.answeringMachineMaxAttemps = parseInt(\r\n        formData.answeringMachineMaxAttemps\r\n      )\r\n      payload.answeringMachinePostponedDays = parseInt(\r\n        formData.answeringMachinePostponedDays\r\n      )\r\n      payload.postponedButtonDays = parseInt(formData.postponedButtonDays)\r\n      payload.nonExistentPostponedDays = parseInt(\r\n        formData.nonExistentPostponedDays\r\n      )\r\n\r\n      payload.hiddenButtons = Object.entries(formData)\r\n        .filter(([k]) => /button\\dshown/.test(k))\r\n        .reduce((acc, [key, value]) => {\r\n          if (value === true) return acc\r\n          const number = key.match(/button(\\d)shown/)![1]\r\n          return [...acc, number]\r\n        }, [] as string[])\r\n        .join(',')\r\n\r\n      const [err, configs] = await Fetch().put<\r\n        TConfigurations,\r\n        { configs: TConfigurations }\r\n      >('/configurations', payload)\r\n\r\n      if (err) throw err\r\n\r\n      updateConfigs(configs.configs)\r\n      AlertManager.show('update-success')\r\n    } catch {\r\n      AlertManager.show('update-error')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  const campaignModeActive =\r\n    getValues('campaignMode') ?? configurations.campaignMode\r\n\r\n  return (\r\n    <>\r\n      <Alert name=\"update-success\" position=\"top\" variant=\"success\">\r\n        ¡Configuraciones actualizadas con éxito! ✨\r\n      </Alert>\r\n      <Alert name=\"update-error\" position=\"bottom\" variant=\"failure\">\r\n        No se pudo actualizar las configuraciones. Por favor, intente de nuevo.\r\n      </Alert>\r\n\r\n      <Container className=\"pt-3 mb-5\">\r\n        <Breadcrumb items={breadcrumbItems} />\r\n        <hr />\r\n\r\n        <Form onSubmit={handleSubmit(saveConfig)}>\r\n          <FormGroup check>\r\n            <Label check>\r\n              <Input type=\"checkbox\" name=\"campaignMode\" innerRef={register} />\r\n              <CampaignLabel active={campaignModeActive}>\r\n                {translations.campaignMode}{' '}\r\n                {campaignModeActive ? 'activado' : 'desactivado'}.\r\n              </CampaignLabel>\r\n            </Label>\r\n          </FormGroup>\r\n          <div>\r\n            Cuando el modo campaña está activado, los publicadores verán un solo\r\n            botón de \"siguiente\" en vez de los {FeedbackValues.length} que\r\n            normalemente se usan. Esto sirve para agilizar las llamadas en caso\r\n            de campaña.\r\n          </div>\r\n          <hr />\r\n          <FormGroup>\r\n            <Label>{translations.unansweredMaxAttemps}</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"unansweredMaxAttemps\"\r\n              innerRef={register({ validate: (d) => d >= 1 })}\r\n            />\r\n            {errors.unansweredMaxAttemps && (\r\n              <span className=\"text-danger\">Valor inválido</span>\r\n            )}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label>{translations.answeringMachineMaxAttemps}</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"answeringMachineMaxAttemps\"\r\n              innerRef={register({ validate: (d) => d >= 1 })}\r\n            />\r\n            {errors.answeringMachineMaxAttemps && (\r\n              <span className=\"text-danger\">Valor inválido</span>\r\n            )}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label>{translations.answeringMachinePostponedDays}</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"answeringMachinePostponedDays\"\r\n              innerRef={register({ validate: (d) => d >= 1 })}\r\n            />\r\n            {errors.answeringMachinePostponedDays && (\r\n              <span className=\"text-danger\">Valor inválido</span>\r\n            )}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label>{translations.postponedButtonDays}</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"postponedButtonDays\"\r\n              innerRef={register({ validate: (d) => d >= 1 })}\r\n            />\r\n            {errors.postponedButtonDays && (\r\n              <span className=\"text-danger\">Valor inválido</span>\r\n            )}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label>{translations.nonExistentPostponedDays}</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"nonExistentPostponedDays\"\r\n              innerRef={register({ validate: (d) => d >= 1 })}\r\n            />\r\n            {errors.nonExistentPostponedDays && (\r\n              <span className=\"text-danger\">Valor inválido</span>\r\n            )}\r\n          </FormGroup>\r\n          <hr />\r\n          <p>Botones que los publicadores pueden usar:</p>\r\n          <Row>\r\n            {FeedbackValues.map((i) => (\r\n              <Col md=\"6\" key={i}>\r\n                <FormGroup check>\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      name={`button${i}shown`}\r\n                      innerRef={register}\r\n                    />\r\n                    {labels[i as Feedback]}\r\n                  </Label>\r\n                </FormGroup>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          <hr />\r\n          <Button\r\n            type=\"submit\"\r\n            block\r\n            color=\"primary\"\r\n            disabled={!isDirty || !isValid || isLoading}\r\n          >\r\n            {isLoading ? <Spinner fulfill /> : 'Guardar configuraciones'}\r\n          </Button>\r\n        </Form>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nconst CampaignLabel = styled.span<{ active: boolean }>`\r\n  color: ${({ active, theme }) =>\r\n    active ? theme.text.colors.green : theme.text.colors.red};\r\n`\r\n\r\nexport { Configurations }\r\n"],"sourceRoot":""}