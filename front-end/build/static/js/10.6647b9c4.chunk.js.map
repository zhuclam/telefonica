{"version":3,"sources":["features/StatisticsPanel/StatisticsPanel.tsx"],"names":["breadcrumbItems","title","linkTo","StatisticsPanel","useState","data","setData","isLoading","setIsLoading","error","setError","Fetch","useFetch","fetchData","useCallback","a","get","err","statistics","console","log","e","useEffect","fulfill","container","generalData","perMonthData","perDayData","formatDecimals","n","toFixed","className","items","totalNumbers","noCall","nonExistent","months","map","row","i","date","total","different","inexistent","answered","totalValidNumbers","totalCalls","Math","round"],"mappings":"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","file":"static/js/10.6647b9c4.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport { useFetch } from 'hooks'\r\nimport { Breadcrumb, ErrorDisplay, Spinner } from 'components'\r\nimport { Statistics } from './types'\r\n\r\nconst breadcrumbItems = [\r\n  {\r\n    title: 'Panel de Administración',\r\n    linkTo: '/admin-panel',\r\n  },\r\n  {\r\n    title: 'Estadísticas',\r\n  },\r\n]\r\n\r\nconst StatisticsPanel: React.FC = () => {\r\n  const [data, setData] = useState<Statistics | null>(null)\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const [error, setError] = useState<boolean>(false)\r\n\r\n  const Fetch = useFetch()\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true)\r\n      setError(false)\r\n      const [err, statistics] = await Fetch().get<Statistics>('statistics')\r\n\r\n      if (err) throw err\r\n\r\n      setData(statistics)\r\n    } catch (e) {\r\n      console.log({ e })\r\n      setError(true)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [Fetch])\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [fetchData])\r\n\r\n  if (error) return <ErrorDisplay />\r\n\r\n  if (isLoading || !data) return <Spinner fulfill container />\r\n\r\n  const { generalData, perMonthData, perDayData } = data\r\n\r\n  const formatDecimals = (n: number) => n.toFixed(2)\r\n\r\n  return (\r\n    <div className=\"container pt-3\">\r\n      <Breadcrumb items={breadcrumbItems} />\r\n      <h4 className=\"mb-4\">General</h4>\r\n\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Números guardados</th>\r\n              <th>No visitar</th>\r\n              <th>Inexistentes</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{generalData.totalNumbers}</td>\r\n              <td>\r\n                {generalData.noCall} (\r\n                {formatDecimals(\r\n                  (generalData.noCall * 100) / generalData.totalNumbers\r\n                )}\r\n                %)\r\n              </td>\r\n              <td>\r\n                {generalData.nonExistent} (\r\n                {formatDecimals(\r\n                  (generalData.nonExistent * 100) / generalData.totalNumbers\r\n                )}\r\n                %)\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <h4 className=\"mb-4\">Estadísticas por mes</h4>\r\n\r\n      <small>\r\n        El TA se calcula haciendo: Números únicos existentes / Números totales\r\n        existentes.\r\n      </small>\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Mes</th>\r\n              <th>Llamadas</th>\r\n              <th>Números únicos</th>\r\n              <th>Números únicos existentes</th>\r\n              <th>Atendieron</th>\r\n              <th>Territorio abarcado</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {perMonthData.months.map((row, i) =>\r\n              row.date === '07/2020' ? (\r\n                <tr key={i}>\r\n                  <td>{row.date}</td>\r\n                  <td>{row.total + 2088}</td>\r\n                  <td>{row.different + 2088}</td>\r\n                  <td>{row.different + 2088 - row.inexistent}</td>\r\n                  <td>\r\n                    {row.answered} (\r\n                    {formatDecimals(\r\n                      (row.answered * 100) /\r\n                        (row.different + 2088 - row.inexistent)\r\n                    )}\r\n                    %)\r\n                  </td>\r\n                  <td>\r\n                    {formatDecimals(\r\n                      ((row.different + 2088 - row.inexistent) * 100) /\r\n                        perMonthData.totalValidNumbers\r\n                    )}\r\n                    %\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                <tr key={i}>\r\n                  <td>{row.date}</td>\r\n                  <td>{row.total}</td>\r\n                  <td>{row.different}</td>\r\n                  <td>{row.different - row.inexistent}</td>\r\n                  <td>\r\n                    {row.answered} (\r\n                    {formatDecimals(\r\n                      (row.answered * 100) / (row.different - row.inexistent)\r\n                    )}\r\n                    %)\r\n                  </td>\r\n                  <td>\r\n                    {formatDecimals(\r\n                      ((row.different - row.inexistent) * 100) /\r\n                        perMonthData.totalValidNumbers\r\n                    )}\r\n                    %\r\n                  </td>\r\n                </tr>\r\n              )\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <h4 className=\"mb-4\">Estadísticas por día</h4>\r\n\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Fecha</th>\r\n              <th>Total de llamadas</th>\r\n              <th>Números únicos</th>\r\n              <th>Atendieron</th>\r\n              <th>No visitar</th>\r\n              <th>Números inexistentes</th>\r\n              <th>Porcentaje de inexistentes</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {perDayData.map((row, i) => (\r\n              <tr key={i}>\r\n                <td>{row.date ?? 'Nunca llamados'}</td>\r\n                <td>{row.totalCalls}</td>\r\n                <td>{row.different}</td>\r\n                <td>{row.answered}</td>\r\n                <td>{row.noCall ?? '-'}</td>\r\n                <td>{row.nonExistent ?? '-'}</td>\r\n                <td>\r\n                  {row.date\r\n                    ? Math.round((row.nonExistent * 100) / row.different) + '%'\r\n                    : '-'}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { StatisticsPanel }\r\n"],"sourceRoot":""}