{"version":3,"sources":["features/Configurations/Configurations.tsx"],"names":["breadcrumbItems","title","linkTo","translations","FeedbackValues","Object","values","Feedback","filter","x","Configurations","useConfig","configurations","updateConfigs","useState","isLoading","setIsLoading","Fetch","useFetch","AlertManager","useAlerts","useForm","mode","reValidateMode","defaultValues","unansweredMaxAttemps","toString","answeringMachineMaxAttemps","answeringMachinePostponedDays","postponedButtonDays","nonExistentPostponedDays","reduce","acc","curr","hiddenButtons","split","includes","register","handleSubmit","errors","formState","isDirty","isValid","saveConfig","formData","a","payload","parseInt","entries","k","test","key","number","match","join","put","err","configs","show","name","position","variant","Container","className","items","Form","onSubmit","FormGroup","Label","Input","type","innerRef","validate","d","Row","map","i","Col","md","check","labels","Button","block","color","disabled","fulfill"],"mappings":"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","file":"static/js/13.c0b2f53f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {\r\n  Container,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Form,\r\n  Button,\r\n  Row,\r\n  Col,\r\n} from 'reactstrap'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useConfig, useFetch } from 'hooks'\r\nimport { Configurations as TConfigurations, Feedback } from 'types'\r\nimport { Alert, Breadcrumb, Spinner, useAlerts } from 'components'\r\nimport { labels } from 'consts'\r\n\r\nconst breadcrumbItems = [\r\n  {\r\n    title: 'Panel de Administración',\r\n    linkTo: '/admin-panel',\r\n  },\r\n  {\r\n    title: 'Configuración de la App',\r\n  },\r\n]\r\n\r\nconst translations: Record<\r\n  keyof Omit<TConfigurations, 'hiddenButtons' | 'territoryId'>,\r\n  string\r\n> = {\r\n  unansweredMaxAttemps: 'Máximo de intentos para no en casa',\r\n  answeringMachineMaxAttemps: 'Máximo de intentos para el contestador',\r\n  answeringMachinePostponedDays:\r\n    'Días que se pospone un número al dejar un mensaje en el contestador',\r\n  postponedButtonDays:\r\n    'Días que se pospone un número al tocar el botón \"Aplazar\"',\r\n  nonExistentPostponedDays: 'Días que queda congelado un número inexistente',\r\n}\r\n\r\ntype EditableConfigurations = {\r\n  unansweredMaxAttemps: string\r\n  answeringMachineMaxAttemps: string\r\n  answeringMachinePostponedDays: string\r\n  postponedButtonDays: string\r\n  nonExistentPostponedDays: string\r\n  button0shown: boolean\r\n  button1shown: boolean\r\n  button2shown: boolean\r\n  button3shown: boolean\r\n  button4shown: boolean\r\n  button5shown: boolean\r\n  button6shown: boolean\r\n}\r\n\r\nconst FeedbackValues = Object.values(Feedback).filter(\r\n  (x) => typeof x === 'number'\r\n) as number[]\r\n\r\nconst Configurations: React.FC = () => {\r\n  const { configurations, updateConfigs } = useConfig()\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n  const Fetch = useFetch()\r\n  const { AlertManager } = useAlerts()\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    errors,\r\n    formState: { isDirty, isValid },\r\n  } = useForm<EditableConfigurations>({\r\n    mode: 'all',\r\n    reValidateMode: 'onChange',\r\n    defaultValues: {\r\n      unansweredMaxAttemps: configurations.unansweredMaxAttemps.toString(),\r\n      answeringMachineMaxAttemps: configurations.answeringMachineMaxAttemps.toString(),\r\n      answeringMachinePostponedDays: configurations.answeringMachinePostponedDays.toString(),\r\n      postponedButtonDays: configurations.postponedButtonDays.toString(),\r\n      nonExistentPostponedDays: configurations.nonExistentPostponedDays.toString(),\r\n      ...FeedbackValues.reduce(\r\n        (acc, curr) => ({\r\n          ...acc,\r\n          [`button${curr}shown`]: !configurations.hiddenButtons\r\n            .split(',')\r\n            .includes(curr.toString()),\r\n        }),\r\n        {}\r\n      ),\r\n    },\r\n  })\r\n\r\n  const saveConfig = async (formData: EditableConfigurations) => {\r\n    try {\r\n      setIsLoading(true)\r\n      const payload = {} as TConfigurations\r\n\r\n      payload.unansweredMaxAttemps = parseInt(formData.unansweredMaxAttemps)\r\n      payload.answeringMachineMaxAttemps = parseInt(\r\n        formData.answeringMachineMaxAttemps\r\n      )\r\n      payload.answeringMachinePostponedDays = parseInt(\r\n        formData.answeringMachinePostponedDays\r\n      )\r\n      payload.postponedButtonDays = parseInt(formData.postponedButtonDays)\r\n      payload.nonExistentPostponedDays = parseInt(\r\n        formData.nonExistentPostponedDays\r\n      )\r\n\r\n      payload.hiddenButtons = Object.entries(formData)\r\n        .filter(([k]) => /button\\dshown/.test(k))\r\n        .reduce((acc, [key, value]) => {\r\n          if (value === true) return acc\r\n          const number = key.match(/button(\\d)shown/)![1]\r\n          return [...acc, number]\r\n        }, [] as string[])\r\n        .join(',')\r\n\r\n      const [err, configs] = await Fetch().put<\r\n        TConfigurations,\r\n        { configurations: TConfigurations }\r\n      >('/configurations', payload)\r\n\r\n      if (err) throw err\r\n\r\n      updateConfigs(configs.configurations)\r\n      AlertManager.show('update-success')\r\n    } catch {\r\n      AlertManager.show('update-error')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Alert name=\"update-success\" position=\"top\" variant=\"success\">\r\n        ¡Configuraciones actualizadas con éxito! ✨\r\n      </Alert>\r\n      <Alert name=\"update-error\" position=\"bottom\" variant=\"failure\">\r\n        No se pudo actualizar las configuraciones. Por favor, intente de nuevo.\r\n      </Alert>\r\n\r\n      <Container className=\"pt-3 mb-5\">\r\n        <Breadcrumb items={breadcrumbItems} />\r\n        <hr />\r\n\r\n        <Form onSubmit={handleSubmit(saveConfig)}>\r\n          <FormGroup>\r\n            <Label>{translations.unansweredMaxAttemps}</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"unansweredMaxAttemps\"\r\n              innerRef={register({ validate: (d) => d >= 1 })}\r\n            />\r\n            {errors.unansweredMaxAttemps && (\r\n              <span className=\"text-danger\">Valor inválido</span>\r\n            )}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label>{translations.answeringMachineMaxAttemps}</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"answeringMachineMaxAttemps\"\r\n              innerRef={register({ validate: (d) => d >= 1 })}\r\n            />\r\n            {errors.answeringMachineMaxAttemps && (\r\n              <span className=\"text-danger\">Valor inválido</span>\r\n            )}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label>{translations.answeringMachinePostponedDays}</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"answeringMachinePostponedDays\"\r\n              innerRef={register({ validate: (d) => d >= 1 })}\r\n            />\r\n            {errors.answeringMachinePostponedDays && (\r\n              <span className=\"text-danger\">Valor inválido</span>\r\n            )}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label>{translations.postponedButtonDays}</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"postponedButtonDays\"\r\n              innerRef={register({ validate: (d) => d >= 1 })}\r\n            />\r\n            {errors.postponedButtonDays && (\r\n              <span className=\"text-danger\">Valor inválido</span>\r\n            )}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label>{translations.nonExistentPostponedDays}</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"nonExistentPostponedDays\"\r\n              innerRef={register({ validate: (d) => d >= 1 })}\r\n            />\r\n            {errors.nonExistentPostponedDays && (\r\n              <span className=\"text-danger\">Valor inválido</span>\r\n            )}\r\n          </FormGroup>\r\n          <hr />\r\n          <p>Botones que los publicadores pueden usar:</p>\r\n          <Row>\r\n            {FeedbackValues.map((i) => (\r\n              <Col md=\"6\" key={i}>\r\n                <FormGroup check>\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      name={`button${i}shown`}\r\n                      innerRef={register}\r\n                    />\r\n                    {labels[i as Feedback]}\r\n                  </Label>\r\n                </FormGroup>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          <hr />\r\n          <Button\r\n            type=\"submit\"\r\n            block\r\n            color=\"primary\"\r\n            disabled={!isDirty || !isValid || isLoading}\r\n          >\r\n            {isLoading ? <Spinner fulfill /> : 'Guardar configuraciones'}\r\n          </Button>\r\n        </Form>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Configurations }\r\n"],"sourceRoot":""}