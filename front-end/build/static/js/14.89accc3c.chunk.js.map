{"version":3,"sources":["features/StatisticsPanel/StatisticsPanel.tsx"],"names":["breadcrumbItems","title","linkTo","StatisticsPanel","useState","data","setData","noData","setNoData","isLoading","setIsLoading","error","setError","Fetch","useFetch","fetchData","useCallback","a","get","err","statistics","console","log","e","useEffect","useMemo","perMonthData","months","sort","b","date","split","am","ay","bm","by","ydiff","Number","message","fulfill","container","generalData","perDayData","formatDecimals","n","toFixed","className","items","totalNumbers","noCall","nonExistent","map","row","i","total","different","inexistent","answered","totalValidNumbers","totalCalls","Math","round"],"mappings":"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","file":"static/js/14.89accc3c.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport { useFetch } from 'hooks'\r\nimport { Breadcrumb, ErrorDisplay, Spinner } from 'components'\r\nimport { Statistics } from './types'\r\n\r\nconst breadcrumbItems = [\r\n  {\r\n    title: 'Panel de Administración',\r\n    linkTo: '/admin-panel',\r\n  },\r\n  {\r\n    title: 'Estadísticas',\r\n  },\r\n]\r\n\r\nconst StatisticsPanel: React.FC = () => {\r\n  const [data, setData] = useState<Statistics | null>(null)\r\n  const [noData, setNoData] = useState<boolean>(false)\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const [error, setError] = useState<boolean>(false)\r\n\r\n  const Fetch = useFetch()\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true)\r\n      setError(false)\r\n      const [err, statistics] = await Fetch().get<Statistics | ''>('statistics')\r\n\r\n      if (err) throw err\r\n\r\n      if (statistics === '') {\r\n        setNoData(true)\r\n        setData(null)\r\n      } else {\r\n        setData(statistics)\r\n        setNoData(false)\r\n      }\r\n    } catch (e) {\r\n      console.log({ e })\r\n      setError(true)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [Fetch])\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [fetchData])\r\n\r\n  useMemo(() => {\r\n    data?.perMonthData.months.sort((a, b) => {\r\n      const [am, ay] = a.date.split('/')\r\n      const [bm, by] = b.date.split('/')\r\n\r\n      const ydiff = Number(by) - Number(ay)\r\n\r\n      if (ydiff !== 0) return ydiff\r\n      return Number(bm) - Number(am)\r\n    })\r\n  }, [data?.perMonthData.months])\r\n\r\n  if (error) return <ErrorDisplay />\r\n  if (noData)\r\n    return (\r\n      <ErrorDisplay message=\"Sin estadísticas. Aún no hay números cargados para este territorio.\" />\r\n    )\r\n  if (isLoading || !data) return <Spinner fulfill container />\r\n\r\n  const { generalData, perMonthData, perDayData } = data\r\n\r\n  const formatDecimals = (n: number) => n.toFixed(2)\r\n\r\n  return (\r\n    <div className=\"container pt-3\">\r\n      <Breadcrumb items={breadcrumbItems} />\r\n      <h4 className=\"mb-4\">General</h4>\r\n\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Números guardados</th>\r\n              <th>No visitar</th>\r\n              <th>Inexistentes</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{generalData.totalNumbers}</td>\r\n              <td>\r\n                {generalData.noCall} (\r\n                {formatDecimals(\r\n                  (generalData.noCall * 100) / generalData.totalNumbers\r\n                )}\r\n                %)\r\n              </td>\r\n              <td>\r\n                {generalData.nonExistent} (\r\n                {formatDecimals(\r\n                  (generalData.nonExistent * 100) / generalData.totalNumbers\r\n                )}\r\n                %)\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <h4 className=\"mb-4\">Estadísticas por mes</h4>\r\n\r\n      <small>\r\n        El TA se calcula haciendo: Números únicos existentes / Números totales\r\n        existentes.\r\n      </small>\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Mes</th>\r\n              <th>Llamadas</th>\r\n              <th>Números únicos</th>\r\n              <th>Números únicos existentes</th>\r\n              <th>Atendieron</th>\r\n              <th>Territorio abarcado</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {perMonthData.months.map((row, i) =>\r\n              row.date === '07/2020' ? (\r\n                <tr key={i}>\r\n                  <td>{row.date}</td>\r\n                  <td>{row.total + 2088}</td>\r\n                  <td>{row.different + 2088}</td>\r\n                  <td>{row.different + 2088 - row.inexistent}</td>\r\n                  <td>\r\n                    {row.answered} (\r\n                    {formatDecimals(\r\n                      (row.answered * 100) /\r\n                        (row.different + 2088 - row.inexistent)\r\n                    )}\r\n                    %)\r\n                  </td>\r\n                  <td>\r\n                    {formatDecimals(\r\n                      ((row.different + 2088 - row.inexistent) * 100) /\r\n                        perMonthData.totalValidNumbers\r\n                    )}\r\n                    %\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                <tr key={i}>\r\n                  <td>{row.date}</td>\r\n                  <td>{row.total}</td>\r\n                  <td>{row.different}</td>\r\n                  <td>{row.different - row.inexistent}</td>\r\n                  <td>\r\n                    {row.answered} (\r\n                    {formatDecimals(\r\n                      (row.answered * 100) / (row.different - row.inexistent)\r\n                    )}\r\n                    %)\r\n                  </td>\r\n                  <td>\r\n                    {formatDecimals(\r\n                      ((row.different - row.inexistent) * 100) /\r\n                        perMonthData.totalValidNumbers\r\n                    )}\r\n                    %\r\n                  </td>\r\n                </tr>\r\n              )\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <h4 className=\"mb-4\">Estadísticas por día</h4>\r\n\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Fecha</th>\r\n              <th>Total de llamadas</th>\r\n              <th>Números únicos</th>\r\n              <th>Atendieron</th>\r\n              <th>No visitar</th>\r\n              <th>Números inexistentes</th>\r\n              <th>Porcentaje de inexistentes</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {perDayData.map((row, i) => (\r\n              <tr key={i}>\r\n                <td>{row.date ?? 'Nunca llamados'}</td>\r\n                <td>{row.totalCalls}</td>\r\n                <td>{row.different}</td>\r\n                <td>{row.answered}</td>\r\n                <td>{row.noCall ?? '-'}</td>\r\n                <td>{row.nonExistent ?? '-'}</td>\r\n                <td>\r\n                  {row.date\r\n                    ? Math.round((row.nonExistent * 100) / row.different) + '%'\r\n                    : '-'}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { StatisticsPanel }\r\n"],"sourceRoot":""}