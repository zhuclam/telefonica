{"version":3,"sources":["../node_modules/reactstrap/es/Table.js","features/SearchAndEdit/components/SearchForm.tsx","features/SearchAndEdit/components/SearchResult.tsx","features/SearchAndEdit/components/EditPhone.tsx","features/SearchAndEdit/SearchAndEdit.tsx"],"names":["propTypes","className","PropTypes","string","cssModule","object","size","bordered","bool","borderless","striped","dark","hover","responsive","oneOfType","tag","tagPropType","responsiveTag","innerRef","func","Table","props","Tag","ResponsiveTag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","table","React","createElement","_extends","ref","responsiveClassName","defaultProps","Error","children","delocalizeDateString","date","split","reverse","join","SearchForm","onSearch","isImport","territories","useConfig","useForm","mode","reValidateMode","defaultValues","count","territoryId","register","handleSubmit","errors","reset","setValue","getValues","formState","isDirty","isSubmitting","isValid","forceUpdate","useRerender","Form","onSubmit","info","number","id","answeredOn","calledOn","noWeekends","noCall","nonExistent","comments","territoryName","filters","find","t","name","toString","Row","Col","xs","md","FormGroup","Label","noEmptyValue","excludeCurrent","Input","type","validate","d","for","autoComplete","check","checked","onChange","e","target","shouldDirty","pattern","placeholder","Button","block","outline","onClick","disabled","color","any","SearchResult","entries","onEditRequest","onDeleteRequest","onDeleteManyRequest","onImport","isImporting","currentTerritory","buildCheckedInputs","useCallback","reduce","acc","curr","useState","checkedInputs","setCheckedInputs","allSelected","useMemo","Object","values","some","selectedCount","filter","Boolean","length","Hr","ActionPanel","style","margin","map","parseInt","Thead","campaignMode","Tbody","phone","Centered","PhoneCell","unansweredDate","fulfilledOn","postponedDays","campaignStatus","ActionCell","a","document","href","body","appendChild","click","remove","onSelfAssign","styled","thead","tbody","td","div","theme","text","colors","white","darkMode","css","black","hr","EditPhone","onBack","onUpdated","isLoading","setIsLoading","Fetch","useFetch","AlertManager","useAlerts","onSaveEdition","formData","put","err","updatedPhone","show","position","variant","Container","fulfill","breadcrumbItems","title","linkTo","importBreadcrumbItems","SearchAndEdit","foundPhones","setFoundPhones","foundCount","setFoundCount","setIsImporting","editingPhone","setEditingPhone","isDeleting","setIsDeleting","testModeEnabled","useConfirmationModal","isDeleteModalOpen","isModalOpen","idToDelete","data","askDeleteOneConfirmation","askEditConfirmation","toggleDeleteOneModal","toggleModal","resetDeleteConfirmationModal","isDeleteManyModalOpen","idListToDelete","askDeleteManyConfirmation","toggleDeleteManyModal","resetDeleteManyConfirmationModal","useEffect","handleSearch","get","path","params","k","v","result","phones","confirmDeletion","delete","p","confirmManyDeletion","ids","newPhones","includes","handleImport","post","phoneToDelete","items","fluid","isOpen","onConfirm","buttonColor","confirmationLabel"],"mappings":"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","file":"static/js/1.ee594dd0.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return /*#__PURE__*/React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;","import React from 'react'\nimport { Button, Col, Form, FormGroup, Input, Label, Row } from 'reactstrap'\nimport { useForm } from 'react-hook-form'\nimport { Filters } from '../types'\nimport { useRerender } from 'hooks/utils'\nimport { TerritorySelector } from 'components'\nimport { useConfig } from 'hooks'\n\nconst Error: React.FC = ({ children }) => (\n  <span className=\"text-danger\">{children}</span>\n)\n\nconst delocalizeDateString = (date: string): string =>\n  date.split('/').reverse().join('-')\n\ninterface SearchFormProps {\n  onSearch: (filters: Filters) => void\n  isImport: boolean\n}\n\nconst SearchForm: React.FC<SearchFormProps> = ({ onSearch, isImport }) => {\n  const { territories } = useConfig()\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    setValue,\n    getValues,\n    formState: { isDirty, isSubmitting, isValid },\n  } = useForm<Required<Filters>>({\n    mode: 'all',\n    reValidateMode: 'onChange',\n    defaultValues: {\n      count: 100,\n      territoryId: 'base',\n    },\n  })\n\n  const onApplyFilters = ({\n    info,\n    number,\n    id,\n    answeredOn,\n    calledOn,\n    noWeekends,\n    noCall,\n    nonExistent,\n    comments,\n    count,\n    territoryId: territoryName,\n  }: Required<Filters>) => {\n    const filters: Filters = {}\n\n    filters.count = count\n\n    info && (filters.info = info)\n    number && (filters.number = number)\n    id && (filters.id = id)\n    comments && (filters.comments = comments)\n    answeredOn &&\n      (answeredOn === 'Nunca'\n        ? (filters.answeredOn = 'never')\n        : (filters.answeredOn = delocalizeDateString(answeredOn)))\n    calledOn &&\n      (calledOn === 'Nunca'\n        ? (filters.calledOn = 'never')\n        : (filters.calledOn = delocalizeDateString(calledOn)))\n    noWeekends && (filters.noWeekends = noWeekends)\n    noCall && (filters.noCall = noCall)\n    nonExistent && (filters.nonExistent = nonExistent)\n    if (territoryName) {\n      const id = territories.find((t) => t.name === territoryName)!.id\n      id && (filters.territoryId = id.toString())\n    }\n\n    onSearch(filters)\n  }\n\n  const searchAny = () => {\n    const filters: Filters = {}\n\n    filters.count = getValues('count')\n    filters.any = true\n\n    onSearch(filters)\n  }\n\n  const { forceUpdate } = useRerender()\n\n  return (\n    <>\n      <span className=\"text-secondary d-block mb-3\">\n        Todos los campos son opcionales.\n      </span>\n      <Form onSubmit={handleSubmit(onApplyFilters)}>\n        <Row>\n          {isImport && (\n            <Col xs={12} md={6}>\n              <FormGroup>\n                <Label>Territorio</Label>\n                <TerritorySelector\n                  name=\"territoryId\"\n                  ref={register}\n                  noEmptyValue\n                  excludeCurrent\n                />\n              </FormGroup>\n            </Col>\n          )}\n          <Col xs={12} md={isImport ? 6 : 12}>\n            <FormGroup>\n              <Label>Cantidad a mostrar</Label>\n              <Input\n                type=\"number\"\n                name=\"count\"\n                innerRef={register({ validate: (d) => d >= 1 })}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <hr />\n        <Row>\n          <Col md=\"2\">\n            <FormGroup>\n              <Label for=\"id\">ID</Label>\n              <Input id=\"id\" name=\"id\" innerRef={register} autoComplete=\"off\" />\n            </FormGroup>\n          </Col>\n          <Col md=\"4\">\n            <FormGroup>\n              <Label for=\"number\">Número</Label>\n              <Input\n                id=\"number\"\n                name=\"number\"\n                innerRef={register}\n                autoComplete=\"off\"\n              />\n            </FormGroup>\n          </Col>\n          <Col md=\"6\">\n            <FormGroup>\n              <Label for=\"info\">Información</Label>\n              <Input\n                id=\"info\"\n                name=\"info\"\n                innerRef={register}\n                autoComplete=\"off\"\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <hr />\n        <Row>\n          <Col md=\"4\">\n            <FormGroup>\n              <Label for=\"comments\">Comentarios</Label>\n              <Input\n                id=\"comments\"\n                name=\"comments\"\n                innerRef={register}\n                autoComplete=\"off\"\n              />\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  checked={getValues('comments') === '*'}\n                  onChange={(e) => {\n                    setValue('comments', e.target.checked ? '*' : '', {\n                      shouldDirty: true,\n                    })\n                    forceUpdate()\n                  }}\n                />\n                Comentario no vacío\n              </Label>\n            </FormGroup>\n          </Col>\n          <Col md=\"4\">\n            <FormGroup>\n              <Label for=\"answeredOn\">Última vez atendido el</Label>\n              <Input\n                id=\"answeredOn\"\n                name=\"answeredOn\"\n                innerRef={register({\n                  pattern: /^(\\d{2}\\/\\d{2}\\/\\d{4}|Nunca)$/,\n                })}\n                placeholder=\"Ej.: 13/04/2020\"\n                autoComplete=\"off\"\n              />\n              {errors.answeredOn && (\n                <Error>\n                  Formato inválido, debe ser dia/mes/año, 'Nunca' o dejar vacío.\n                </Error>\n              )}\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  checked={getValues('answeredOn') === 'Nunca'}\n                  onChange={(e) => {\n                    setValue('answeredOn', e.target.checked ? 'Nunca' : '', {\n                      shouldDirty: true,\n                    })\n                    forceUpdate()\n                  }}\n                />\n                Nunca antes atendió\n              </Label>\n            </FormGroup>\n          </Col>\n          <Col md=\"4\">\n            <FormGroup>\n              <Label for=\"calledOn\">Última vez llamado el</Label>\n              <Input\n                id=\"calledOn\"\n                name=\"calledOn\"\n                innerRef={register({\n                  pattern: /^(\\d{2}\\/\\d{2}\\/\\d{4}|Nunca)$/,\n                })}\n                placeholder=\"Ej.: 13/04/2020\"\n                autoComplete=\"off\"\n              />\n\n              {errors.calledOn && (\n                <Error>\n                  Formato inválido, debe ser dia/mes/año, 'Nunca' o dejar vacío.\n                </Error>\n              )}\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  checked={getValues('calledOn') === 'Nunca'}\n                  onChange={(e) => {\n                    setValue('calledOn', e.target.checked ? 'Nunca' : '', {\n                      shouldDirty: true,\n                    })\n                    forceUpdate()\n                  }}\n                />\n                Nunca antes llamado\n              </Label>\n            </FormGroup>\n          </Col>\n        </Row>\n        <hr />\n        <Row>\n          <Col md=\"4\">\n            <FormGroup check>\n              <Label check>\n                <Input type=\"checkbox\" name=\"noWeekends\" innerRef={register} />\n                No llamar los fines de semana\n              </Label>\n            </FormGroup>\n          </Col>\n          <Col md=\"4\">\n            <FormGroup check>\n              <Label check>\n                <Input type=\"checkbox\" name=\"noCall\" innerRef={register} />\n                No visitar\n              </Label>\n            </FormGroup>\n          </Col>\n          <Col md=\"4\">\n            <FormGroup check>\n              <Label check>\n                <Input type=\"checkbox\" name=\"nonExistent\" innerRef={register} />\n                No existente\n              </Label>\n            </FormGroup>\n          </Col>\n        </Row>\n        <hr />\n        <Row>\n          <Col md={isImport ? 6 : 4}>\n            <Button block outline onClick={() => reset()}>\n              Limpiar campos\n            </Button>\n          </Col>\n          <Col md={isImport ? 6 : 4}>\n            <Button\n              type=\"submit\"\n              disabled={\n                isImport\n                  ? !isValid || isSubmitting\n                  : (!isDirty &&\n                      !getValues('answeredOn') &&\n                      !getValues('calledOn') &&\n                      !getValues('comments')) ||\n                    !isValid ||\n                    isSubmitting\n              }\n              color=\"primary\"\n              block\n            >\n              Buscar{!isImport ? ' con filtros' : ''}\n            </Button>\n          </Col>\n          {!isImport && (\n            <Col md=\"4\">\n              <Button color=\"success\" block onClick={searchAny}>\n                Buscar todos\n              </Button>\n            </Col>\n          )}\n        </Row>\n      </Form>\n    </>\n  )\n}\n\nexport { SearchForm }\n","import React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Table, Input } from 'reactstrap'\nimport styled, { css } from 'styled'\nimport { Phone } from 'types'\nimport { useConfig } from 'hooks'\nimport { Spinner } from 'components'\n\ninterface SearchResultProps {\n  entries: Phone[]\n  count: number\n  onEditRequest: (phone: Phone) => void\n  onDeleteRequest: (id: number) => void\n  onDeleteManyRequest: (ids: number[]) => void\n  onImport: (ids: number[]) => void\n  isImport: boolean\n  isImporting: boolean\n}\n\ntype CheckedMap = { [k: number]: boolean }\n\nconst SearchResult: React.FC<SearchResultProps> = ({\n  entries,\n  count,\n  onEditRequest,\n  onDeleteRequest,\n  onDeleteManyRequest,\n  onImport,\n  isImport,\n  isImporting,\n}) => {\n  const { currentTerritory, territories } = useConfig()\n  const buildCheckedInputs = useCallback(\n    (checked: boolean) =>\n      entries.reduce((acc, curr) => {\n        acc[curr.id] = checked\n        return acc\n      }, {} as CheckedMap),\n    [entries]\n  )\n  const [checkedInputs, setCheckedInputs] = useState<CheckedMap>(() =>\n    buildCheckedInputs(false)\n  )\n\n  const onCheckInput = (id: number, checked: boolean) =>\n    setCheckedInputs({ ...checkedInputs, [id]: checked })\n\n  const allSelected = useMemo(\n    () => !Object.values(checkedInputs).some((checked) => !checked),\n    [checkedInputs]\n  )\n\n  const onToggleSelectAll = () =>\n    setCheckedInputs(buildCheckedInputs(!allSelected))\n\n  const selectedCount = useMemo(\n    () => Object.values(checkedInputs).filter(Boolean).length,\n    [checkedInputs]\n  )\n\n  const handleDeleteMany = () =>\n    onDeleteManyRequest(\n      Object.entries(checkedInputs)\n        .filter(([, checked]) => checked)\n        .map(([id]) => parseInt(id))\n    )\n\n  const handleImport = () =>\n    onImport(\n      Object.entries(checkedInputs)\n        .filter(([, checked]) => checked)\n        .map(([id]) => parseInt(id))\n    )\n\n  const onSelfAssign = (id: number) => {\n    const a = document.createElement('a')\n    a.href = `/${currentTerritory.name}/telefonica?id=${id}`\n    a.target = '_blank'\n    document.body.appendChild(a)\n    a.click()\n    a.remove()\n  }\n\n  return (\n    <>\n      <h3>\n        Mostrando {entries.length} de {count} resultados.\n      </h3>\n      <Hr />\n      <ActionPanel>\n        {isImporting ? (\n          <Spinner />\n        ) : (\n          <>\n            ({selectedCount} seleccionados)\n            <span style={{ margin: '0 1rem' }}>|</span>\n            <Button color=\"secondary\" onClick={onToggleSelectAll}>\n              {allSelected ? 'Des' : 'S'}eleccionar todos\n            </Button>\n            {isImport ? (\n              <Button\n                color=\"success\"\n                disabled={selectedCount === 0}\n                onClick={handleImport}\n              >\n                Importar todos los seleccionados\n              </Button>\n            ) : (\n              <Button\n                color=\"danger\"\n                disabled={selectedCount === 0}\n                onClick={handleDeleteMany}\n              >\n                Borrar todos los seleccionados\n              </Button>\n            )}\n          </>\n        )}\n      </ActionPanel>\n      <Table striped responsive>\n        <Thead>\n          <tr>\n            <th />\n            <th>ID</th>\n            {isImport && <th>Territorio</th>}\n            <th>Número</th>\n            <th>Info</th>\n            <th>Última vez llamado</th>\n            <th>Última vez que atendió</th>\n            <th>Comentarios</th>\n            <th>Días pospuesto</th>\n            <th>Características</th>\n            {!isImport && !!currentTerritory.campaignMode && (\n              <th style={{ color: 'gold' }}>Completado en campaña</th>\n            )}\n            {!isImport && <th>Acciones</th>}\n          </tr>\n        </Thead>\n        <Tbody>\n          {entries.map((phone) => (\n            <tr key={phone.id}>\n              <td>\n                <Centered>\n                  <Input\n                    type=\"checkbox\"\n                    checked={checkedInputs[phone.id]}\n                    onChange={(e) => onCheckInput(phone.id, e.target.checked)}\n                  />\n                </Centered>\n              </td>\n              <td>{phone.id}</td>\n              {isImport && (\n                <td>\n                  {territories.find((t) => t.id === phone.territoryId)?.name}\n                </td>\n              )}\n              <PhoneCell>{phone.phone}</PhoneCell>\n              <td>{phone.info}</td>\n              <td>{phone.unansweredDate || phone.fulfilledOn || 'Nunca'}</td>\n              <td>{phone.answeredOn || 'Nunca'}</td>\n              <td>{phone.comments}</td>\n              <td>{phone.postponedDays}</td>\n              <td>\n                {[\n                  phone.noCall && 'No visitar',\n                  phone.nonExistent && 'No existe',\n                  phone.noWeekends && 'No llamar los finde',\n                ]\n                  .filter(Boolean)\n                  .join(', ')}\n              </td>\n              {!isImport && !!currentTerritory.campaignMode && (\n                <td style={{ color: 'gold' }}>\n                  {phone.campaignStatus ? 'Sí' : 'No'}\n                </td>\n              )}\n              {!isImport && (\n                <ActionCell>\n                  <Button\n                    color=\"success\"\n                    onClick={() => onSelfAssign(phone.id)}\n                  >\n                    Autoasignar\n                  </Button>\n                  <Button color=\"warning\" onClick={() => onEditRequest(phone)}>\n                    Editar\n                  </Button>\n                  <Button\n                    color=\"danger\"\n                    onClick={() => onDeleteRequest(phone.id)}\n                  >\n                    Borrar\n                  </Button>\n                </ActionCell>\n              )}\n            </tr>\n          ))}\n        </Tbody>\n      </Table>\n    </>\n  )\n}\n\nconst Thead = styled.thead`\n  text-align: center;\n\n  > tr > th {\n    vertical-align: middle;\n  }\n`\n\nconst Tbody = styled.tbody`\n  text-align: center;\n`\n\nconst PhoneCell = styled.td`\n  white-space: nowrap;\n`\n\nconst ActionCell = styled.td`\n  white-space: nowrap;\n\n  button:not(:first-of-type) {\n    margin-left: 1em;\n  }\n`\n\nconst ActionPanel = styled.div`\n  padding: 0.5rem 0;\n  margin-bottom: 1rem;\n  position: sticky;\n  top: 0;\n  background: ${({ theme }) => theme.text.colors.white};\n  z-index: 1;\n\n  ${({ theme }) =>\n    theme.darkMode &&\n    css`\n      background: ${theme.text.colors.black};\n      color: ${theme.text.colors.white};\n    `}\n\n  button:not(:first-of-type) {\n    margin-left: 1em;\n  }\n`\n\nconst Centered = styled.div`\n  padding-left: 1.5rem;\n  position: relative;\n`\n\nconst Hr = styled.hr`\n  border-top: ${({ theme }) =>\n    theme.darkMode && '1px solid rgba(255,255,255,.1)'};\n`\n\nexport { SearchResult }\n","import React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport {\n  Button,\n  Col,\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n} from 'reactstrap'\nimport { Alert, Spinner, useAlerts } from 'components'\nimport { useFetch } from 'hooks'\nimport { Phone } from 'types'\n\ntype Fields = Pick<\n  Phone,\n  | 'comments'\n  | 'info'\n  | 'noCall'\n  | 'nonExistent'\n  | 'postponedDays'\n  | 'phone'\n  | 'noWeekends'\n>\n\ntype EditableFields = {\n  [k in keyof Fields]: NonNullable<Fields[k]>\n}\n\ninterface EditPhoneProps {\n  phone: Phone\n  onBack: () => void\n  onUpdated: (updatedPhone: Phone) => void\n}\n\nconst EditPhone: React.FC<EditPhoneProps> = ({ phone, onBack, onUpdated }) => {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    formState: { isDirty, isValid },\n  } = useForm<EditableFields>({\n    mode: 'all',\n    reValidateMode: 'onChange',\n    defaultValues: {\n      phone: phone.phone,\n      comments: phone.comments,\n      info: phone.info ?? '',\n      noCall: phone.noCall,\n      nonExistent: phone.nonExistent,\n      postponedDays: phone.postponedDays,\n      noWeekends: phone.noWeekends,\n    },\n  })\n\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n\n  const Fetch = useFetch()\n  const { AlertManager } = useAlerts()\n\n  const onSaveEdition = async (formData: EditableFields) => {\n    try {\n      setIsLoading(true)\n\n      const [err, updatedPhone] = await Fetch().put<\n        EditableFields,\n        { phone: Phone }\n      >(`phones/${phone.id}`, formData)\n\n      if (err) throw err\n\n      onUpdated(updatedPhone.phone)\n      AlertManager.show('update-success')\n    } catch {\n      AlertManager.show('update-error')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <>\n      <Alert name=\"update-success\" position=\"top\" variant=\"success\">\n        ¡Número actualizado con éxito! ✨\n      </Alert>\n      <Alert name=\"update-error\" position=\"bottom\" variant=\"failure\">\n        No se pudo actualizar el teléfono. Por favor, intente de nuevo.\n      </Alert>\n      <Container className=\"pt-4\">\n        <h1>Editar número</h1>\n        <Form onSubmit={handleSubmit(onSaveEdition)}>\n          <Row>\n            <Col md=\"3\">\n              <FormGroup>\n                <Label>Número</Label>\n                <Input name=\"phone\" innerRef={register} />\n              </FormGroup>\n            </Col>\n            <Col md=\"6\">\n              <FormGroup>\n                <Label>Info</Label>\n                <Input name=\"info\" innerRef={register} />\n              </FormGroup>\n            </Col>\n            <Col md=\"3\">\n              <FormGroup>\n                <Label>Días pospuesto</Label>\n                <Input\n                  type=\"number\"\n                  name=\"postponedDays\"\n                  innerRef={register({ validate: (d) => d >= 0 })}\n                />\n              </FormGroup>\n              {errors.postponedDays && (\n                <span className=\"text-danger\">Valor inválido</span>\n              )}\n            </Col>\n            <Col md=\"12\">\n              <FormGroup>\n                <Label>Comentarios</Label>\n                <Input name=\"comments\" innerRef={register} />\n              </FormGroup>\n            </Col>\n            <Col md=\"4\">\n              <FormGroup check>\n                <Label check>\n                  <Input\n                    type=\"checkbox\"\n                    name=\"noWeekends\"\n                    innerRef={register}\n                  />\n                  No llamar los finde\n                </Label>\n              </FormGroup>\n            </Col>\n            <Col md=\"4\">\n              <FormGroup check>\n                <Label check>\n                  <Input type=\"checkbox\" name=\"noCall\" innerRef={register} />\n                  No visitar\n                </Label>\n              </FormGroup>\n            </Col>\n            <Col md=\"4\">\n              <FormGroup check>\n                <Label check>\n                  <Input\n                    type=\"checkbox\"\n                    name=\"nonExistent\"\n                    innerRef={register}\n                  />\n                  No existente\n                </Label>\n              </FormGroup>\n            </Col>\n          </Row>\n          <hr />\n          <Row>\n            <Col md=\"6\">\n              <Button outline block onClick={onBack}>\n                Volver atrás\n              </Button>\n            </Col>\n            <Col md=\"6\">\n              <Button\n                type=\"submit\"\n                block\n                color=\"primary\"\n                disabled={!isDirty || !isValid}\n              >\n                {isLoading ? <Spinner fulfill /> : 'Guardar'}\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </>\n  )\n}\n\nexport { EditPhone }\n","import React, { FunctionComponent, useEffect, useState } from 'react'\nimport { Container } from 'reactstrap'\nimport { useConfig, useFetch } from 'hooks'\nimport { Phone } from 'types'\nimport {\n  Alert,\n  Spinner,\n  useAlerts,\n  useConfirmationModal,\n  ConfirmationModal,\n  Breadcrumb,\n} from 'components'\nimport { EditPhone, SearchForm, SearchResult } from './components'\nimport { Filters, SearchResponse } from './types'\n\nconst breadcrumbItems = [\n  {\n    title: 'Panel de Administración',\n    linkTo: '/admin-panel',\n  },\n  {\n    title: 'Buscar y editar',\n  },\n]\n\nconst importBreadcrumbItems = [\n  {\n    title: 'Panel de Administración',\n    linkTo: '/admin-panel',\n  },\n  {\n    title: 'Agregar Números',\n    linkTo: '/admin-panel/add-phones',\n  },\n  {\n    title: 'Importar',\n  },\n]\n\ntype SearchAndEditProps = {\n  isImport?: boolean\n}\n\nconst SearchAndEdit: FunctionComponent<SearchAndEditProps> = ({\n  isImport = false,\n}) => {\n  const [foundPhones, setFoundPhones] = useState<\n    SearchResponse['phones'] | null\n  >(null)\n  const [foundCount, setFoundCount] = useState<SearchResponse['count']>(0)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [isImporting, setIsImporting] = useState<boolean>(false)\n\n  const [editingPhone, setEditingPhone] = useState<Phone | null>(null)\n\n  const [isDeleting, setIsDeleting] = useState<boolean>(false)\n\n  const { testModeEnabled } = useConfig()\n\n  const {\n    isModalOpen: isDeleteModalOpen,\n    data: idToDelete,\n    askEditConfirmation: askDeleteOneConfirmation,\n    toggleModal: toggleDeleteOneModal,\n    reset: resetDeleteConfirmationModal,\n  } = useConfirmationModal<number>()\n\n  const {\n    isModalOpen: isDeleteManyModalOpen,\n    data: idListToDelete,\n    askEditConfirmation: askDeleteManyConfirmation,\n    toggleModal: toggleDeleteManyModal,\n    reset: resetDeleteManyConfirmationModal,\n  } = useConfirmationModal<number[]>()\n\n  useEffect(() => {\n    setFoundPhones(null)\n    setFoundCount(0)\n    setEditingPhone(null)\n  }, [testModeEnabled])\n\n  const Fetch = useFetch()\n  const { AlertManager } = useAlerts()\n\n  const handleSearch = async (filters: Filters) => {\n    try {\n      setIsLoading(true)\n\n      const [err, result] = await Fetch().get<SearchResponse>({\n        path: 'phones',\n        params: Object.entries(filters)\n          .map(([k, v]) => [k, typeof v !== 'boolean' ? v : v ? 1 : 0])\n          .reduce(\n            (acc, [k, v]) => ({ ...acc, [k]: v }),\n            {} as Filters\n          ) as Record<string, string>,\n      })\n\n      if (err) throw err\n\n      setFoundPhones(result.phones)\n      setFoundCount(result.count)\n    } catch {\n      AlertManager.show('search-error')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleEditRequest = (phone: Phone) => setEditingPhone(phone)\n\n  const handleDeleteRequest = (id: number) => askDeleteOneConfirmation(id)\n\n  const handleDeleteManyRequest = (ids: number[]) =>\n    askDeleteManyConfirmation(ids)\n\n  const confirmDeletion = async () => {\n    try {\n      setIsDeleting(true)\n\n      const [err] = await Fetch().delete(`phones/${idToDelete}`)\n\n      if (err) throw err\n\n      resetDeleteConfirmationModal()\n      setFoundPhones(foundPhones!.filter((p) => p.id !== idToDelete))\n      setFoundCount(foundCount - 1)\n    } catch {\n      AlertManager.show('deletion-error')\n    } finally {\n      setIsDeleting(false)\n    }\n  }\n\n  const confirmManyDeletion = async () => {\n    if (!idListToDelete) return\n    try {\n      setIsDeleting(true)\n\n      const [err] = await Fetch().delete<{ ids: number[] }>('phones/bulk', {\n        ids: idListToDelete,\n      })\n\n      if (err) throw err\n\n      const newPhones = foundPhones!.filter(\n        (p) => !idListToDelete.includes(p.id)\n      )\n      setFoundPhones(newPhones)\n      setFoundCount(foundCount - idListToDelete.length)\n      resetDeleteManyConfirmationModal()\n    } catch {\n      AlertManager.show('deletion-error')\n    } finally {\n      setIsDeleting(false)\n    }\n  }\n\n  const handleImport = async (ids: number[]) => {\n    if (ids.length === 0) return\n    try {\n      setIsImporting(true)\n\n      const [err] = await Fetch().post<{ ids: number[] }, void>(\n        'phones/import',\n        {\n          ids,\n        }\n      )\n\n      if (err) throw err\n\n      const newPhones = foundPhones!.filter((p) => !ids.includes(p.id))\n      setFoundPhones(newPhones)\n      setFoundCount(foundCount - ids.length)\n      AlertManager.show('import-success')\n    } catch {\n      AlertManager.show('import-error')\n    } finally {\n      setIsImporting(false)\n    }\n  }\n\n  const handleBack = () => setEditingPhone(null)\n\n  const handleUpdatedPhone = (updatedPhone: Phone) =>\n    foundPhones &&\n    setFoundPhones(\n      foundPhones.map((p) => (p.id === updatedPhone.id ? updatedPhone : p))\n    )\n\n  if (editingPhone !== null)\n    return (\n      <EditPhone\n        phone={editingPhone}\n        onBack={handleBack}\n        onUpdated={handleUpdatedPhone}\n      />\n    )\n\n  const phoneToDelete =\n    idToDelete !== null && foundPhones?.find((p) => p.id === idToDelete)!\n\n  return (\n    <>\n      <Alert name=\"search-error\" position=\"top\" variant=\"failure\">\n        No se pudo buscar. Por favor, intente de nuevo.\n      </Alert>\n      <Alert name=\"deletion-error\" position=\"top\" variant=\"failure\">\n        No se pudo eliminar. Por favor, intente de nuevo.\n      </Alert>\n      <Alert name=\"import-success\" position=\"top\" variant=\"success\">\n        ¡Números importados exitosamente!\n      </Alert>\n      <Alert name=\"import-error\" position=\"top\" variant=\"failure\">\n        No se pudo importar. Por favor, intente de nuevo.\n      </Alert>\n      <Container className=\"pt-4 mb-5\">\n        <Breadcrumb\n          items={isImport ? importBreadcrumbItems : breadcrumbItems}\n        />\n        <SearchForm onSearch={handleSearch} isImport={isImport} />\n      </Container>\n      <Container fluid>\n        {isLoading ? (\n          <Spinner />\n        ) : (\n          foundPhones && (\n            <SearchResult\n              isImport={isImport}\n              entries={foundPhones}\n              count={foundCount}\n              onEditRequest={handleEditRequest}\n              onDeleteRequest={handleDeleteRequest}\n              onDeleteManyRequest={handleDeleteManyRequest}\n              onImport={handleImport}\n              isImporting={isImporting}\n            />\n          )\n        )}\n      </Container>\n      {idToDelete !== null && phoneToDelete && (\n        <ConfirmationModal\n          isOpen={isDeleteModalOpen}\n          toggleModal={toggleDeleteOneModal}\n          onConfirm={confirmDeletion}\n          title=\"¿Seguro que desea eliminar el siguiente número?\"\n          body={\n            isDeleting ? (\n              <Spinner fulfill />\n            ) : (\n              <div>\n                <span className=\"d-block\">ID: {phoneToDelete.id}</span>\n                <span className=\"d-block\">Número: {phoneToDelete.phone}</span>\n                <span className=\"d-block\">Info: {phoneToDelete.info}</span>\n              </div>\n            )\n          }\n          buttonColor=\"danger\"\n          confirmationLabel=\"Eliminar para siempre\"\n        />\n      )}\n      {idListToDelete !== null && (\n        <ConfirmationModal\n          isOpen={isDeleteManyModalOpen}\n          toggleModal={toggleDeleteManyModal}\n          onConfirm={confirmManyDeletion}\n          title={`¿Seguro que desea eliminar ${idListToDelete.length} números?`}\n          body={isDeleting && <Spinner fulfill />}\n          buttonColor=\"danger\"\n          confirmationLabel=\"Eliminar para siempre\"\n        />\n      )}\n    </>\n  )\n}\n\nexport { SearchAndEdit }\n"],"sourceRoot":""}