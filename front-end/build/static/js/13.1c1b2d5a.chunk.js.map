{"version":3,"sources":["features/Configurations/Configurations.tsx"],"names":["breadcrumbItems","title","linkTo","translations","FeedbackValues","Object","values","Feedback","filter","x","Configurations","useConfig","configurations","updateConfigs","useState","isLoading","setIsLoading","Fetch","useFetch","AlertManager","useAlerts","useForm","mode","reValidateMode","defaultValues","unansweredMaxAttemps","toString","answeringMachineMaxAttemps","answeringMachinePostponedDays","postponedButtonDays","nonExistentPostponedDays","reduce","acc","curr","hiddenButtons","split","includes","register","handleSubmit","errors","formState","isDirty","isValid","saveConfig","formData","a","payload","parseInt","entries","k","test","key","number","match","join","put","err","configs","show","name","position","variant","Container","className","items","Form","onSubmit","FormGroup","Label","Input","type","innerRef","validate","d","Row","map","i","Col","md","check","labels","Button","block","color","disabled","fulfill"],"mappings":"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","file":"static/js/13.1c1b2d5a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Container,\n  FormGroup,\n  Input,\n  Label,\n  Form,\n  Button,\n  Row,\n  Col,\n} from 'reactstrap'\nimport { useForm } from 'react-hook-form'\nimport { useConfig, useFetch } from 'hooks'\nimport { Configurations as TConfigurations, Feedback } from 'types'\nimport { Alert, Breadcrumb, Spinner, useAlerts } from 'components'\nimport { labels } from 'consts'\n\nconst breadcrumbItems = [\n  {\n    title: 'Panel de Administración',\n    linkTo: '/admin-panel',\n  },\n  {\n    title: 'Configuración de la App',\n  },\n]\n\nconst translations: Record<\n  keyof Omit<TConfigurations, 'hiddenButtons' | 'territoryId'>,\n  string\n> = {\n  unansweredMaxAttemps: 'Máximo de intentos para no en casa',\n  answeringMachineMaxAttemps: 'Máximo de intentos para el contestador',\n  answeringMachinePostponedDays:\n    'Días que se pospone un número al dejar un mensaje en el contestador',\n  postponedButtonDays:\n    'Días que se pospone un número al tocar el botón \"Aplazar\"',\n  nonExistentPostponedDays: 'Días que queda congelado un número inexistente',\n}\n\ntype EditableConfigurations = {\n  unansweredMaxAttemps: string\n  answeringMachineMaxAttemps: string\n  answeringMachinePostponedDays: string\n  postponedButtonDays: string\n  nonExistentPostponedDays: string\n  button0shown: boolean\n  button1shown: boolean\n  button2shown: boolean\n  button3shown: boolean\n  button4shown: boolean\n  button5shown: boolean\n  button6shown: boolean\n}\n\nconst FeedbackValues = Object.values(Feedback).filter(\n  (x) => typeof x === 'number'\n) as number[]\n\nconst Configurations: React.FC = () => {\n  const { configurations, updateConfigs } = useConfig()\n\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n\n  const Fetch = useFetch()\n  const { AlertManager } = useAlerts()\n\n  const {\n    register,\n    handleSubmit,\n    errors,\n    formState: { isDirty, isValid },\n  } = useForm<EditableConfigurations>({\n    mode: 'all',\n    reValidateMode: 'onChange',\n    defaultValues: {\n      unansweredMaxAttemps: configurations.unansweredMaxAttemps.toString(),\n      answeringMachineMaxAttemps:\n        configurations.answeringMachineMaxAttemps.toString(),\n      answeringMachinePostponedDays:\n        configurations.answeringMachinePostponedDays.toString(),\n      postponedButtonDays: configurations.postponedButtonDays.toString(),\n      nonExistentPostponedDays:\n        configurations.nonExistentPostponedDays.toString(),\n      ...FeedbackValues.reduce(\n        (acc, curr) => ({\n          ...acc,\n          [`button${curr}shown`]: !configurations.hiddenButtons\n            .split(',')\n            .includes(curr.toString()),\n        }),\n        {}\n      ),\n    },\n  })\n\n  const saveConfig = async (formData: EditableConfigurations) => {\n    try {\n      setIsLoading(true)\n      const payload = {} as TConfigurations\n\n      payload.unansweredMaxAttemps = parseInt(formData.unansweredMaxAttemps)\n      payload.answeringMachineMaxAttemps = parseInt(\n        formData.answeringMachineMaxAttemps\n      )\n      payload.answeringMachinePostponedDays = parseInt(\n        formData.answeringMachinePostponedDays\n      )\n      payload.postponedButtonDays = parseInt(formData.postponedButtonDays)\n      payload.nonExistentPostponedDays = parseInt(\n        formData.nonExistentPostponedDays\n      )\n\n      payload.hiddenButtons = Object.entries(formData)\n        .filter(([k]) => /button\\dshown/.test(k))\n        .reduce((acc, [key, value]) => {\n          if (value === true) return acc\n          const number = key.match(/button(\\d)shown/)![1]\n          return [...acc, number]\n        }, [] as string[])\n        .join(',')\n\n      const [err, configs] = await Fetch().put<\n        TConfigurations,\n        { configurations: TConfigurations }\n      >('/configurations', payload)\n\n      if (err) throw err\n\n      updateConfigs(configs.configurations)\n      AlertManager.show('update-success')\n    } catch {\n      AlertManager.show('update-error')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <>\n      <Alert name=\"update-success\" position=\"top\" variant=\"success\">\n        ¡Configuraciones actualizadas con éxito! ✨\n      </Alert>\n      <Alert name=\"update-error\" position=\"bottom\" variant=\"failure\">\n        No se pudo actualizar las configuraciones. Por favor, intente de nuevo.\n      </Alert>\n\n      <Container className=\"pt-3 mb-5\">\n        <Breadcrumb items={breadcrumbItems} />\n        <hr />\n\n        <Form onSubmit={handleSubmit(saveConfig)}>\n          <FormGroup>\n            <Label>{translations.unansweredMaxAttemps}</Label>\n            <Input\n              type=\"number\"\n              name=\"unansweredMaxAttemps\"\n              innerRef={register({ validate: (d) => d >= 1 })}\n            />\n            {errors.unansweredMaxAttemps && (\n              <span className=\"text-danger\">Valor inválido</span>\n            )}\n          </FormGroup>\n          <FormGroup>\n            <Label>{translations.answeringMachineMaxAttemps}</Label>\n            <Input\n              type=\"number\"\n              name=\"answeringMachineMaxAttemps\"\n              innerRef={register({ validate: (d) => d >= 1 })}\n            />\n            {errors.answeringMachineMaxAttemps && (\n              <span className=\"text-danger\">Valor inválido</span>\n            )}\n          </FormGroup>\n          <FormGroup>\n            <Label>{translations.answeringMachinePostponedDays}</Label>\n            <Input\n              type=\"number\"\n              name=\"answeringMachinePostponedDays\"\n              innerRef={register({ validate: (d) => d >= 1 })}\n            />\n            {errors.answeringMachinePostponedDays && (\n              <span className=\"text-danger\">Valor inválido</span>\n            )}\n          </FormGroup>\n          <FormGroup>\n            <Label>{translations.postponedButtonDays}</Label>\n            <Input\n              type=\"number\"\n              name=\"postponedButtonDays\"\n              innerRef={register({ validate: (d) => d >= 1 })}\n            />\n            {errors.postponedButtonDays && (\n              <span className=\"text-danger\">Valor inválido</span>\n            )}\n          </FormGroup>\n          <FormGroup>\n            <Label>{translations.nonExistentPostponedDays}</Label>\n            <Input\n              type=\"number\"\n              name=\"nonExistentPostponedDays\"\n              innerRef={register({ validate: (d) => d >= 1 })}\n            />\n            {errors.nonExistentPostponedDays && (\n              <span className=\"text-danger\">Valor inválido</span>\n            )}\n          </FormGroup>\n          <hr />\n          <p>Botones que los publicadores pueden usar:</p>\n          <Row>\n            {FeedbackValues.map((i) => (\n              <Col md=\"6\" key={i}>\n                <FormGroup check>\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      name={`button${i}shown`}\n                      innerRef={register}\n                    />\n                    {labels(false, null!)[i as Feedback]}\n                  </Label>\n                </FormGroup>\n              </Col>\n            ))}\n          </Row>\n          <hr />\n          <Button\n            type=\"submit\"\n            block\n            color=\"primary\"\n            disabled={!isDirty || !isValid || isLoading}\n          >\n            {isLoading ? <Spinner fulfill /> : 'Guardar configuraciones'}\n          </Button>\n        </Form>\n      </Container>\n    </>\n  )\n}\n\nexport { Configurations }\n"],"sourceRoot":""}