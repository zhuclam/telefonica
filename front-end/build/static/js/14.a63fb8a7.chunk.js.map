{"version":3,"sources":["features/StatisticsPanel/StatisticsPanel.tsx"],"names":["breadcrumbItems","title","linkTo","StatisticsPanel","useState","data","setData","noData","setNoData","isLoading","setIsLoading","error","setError","Fetch","useFetch","fetchData","useCallback","a","get","err","statistics","console","log","e","useEffect","useMemo","perMonthData","months","sort","b","date","split","am","ay","bm","by","ydiff","Number","message","fulfill","container","generalData","perDayData","formatDecimals","n","toFixed","className","items","totalNumbers","noCall","nonExistent","map","row","i","total","different","inexistent","answered","totalValidNumbers","totalCalls","Math","round"],"mappings":"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","file":"static/js/14.a63fb8a7.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useFetch } from 'hooks'\nimport { Breadcrumb, ErrorDisplay, Spinner } from 'components'\nimport { Statistics } from './types'\n\nconst breadcrumbItems = [\n  {\n    title: 'Panel de Administración',\n    linkTo: '/admin-panel',\n  },\n  {\n    title: 'Estadísticas',\n  },\n]\n\nconst StatisticsPanel: React.FC = () => {\n  const [data, setData] = useState<Statistics | null>(null)\n  const [noData, setNoData] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n  const [error, setError] = useState<boolean>(false)\n\n  const Fetch = useFetch()\n\n  const fetchData = useCallback(async () => {\n    try {\n      setIsLoading(true)\n      setError(false)\n      const [err, statistics] = await Fetch().get<Statistics | ''>('statistics')\n\n      if (err) throw err\n\n      if (statistics === '') {\n        setNoData(true)\n        setData(null)\n      } else {\n        setData(statistics)\n        setNoData(false)\n      }\n    } catch (e) {\n      console.log({ e })\n      setError(true)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [Fetch])\n\n  useEffect(() => {\n    fetchData()\n  }, [fetchData])\n\n  useMemo(() => {\n    data?.perMonthData.months.sort((a, b) => {\n      const [am, ay] = a.date.split('/')\n      const [bm, by] = b.date.split('/')\n\n      const ydiff = Number(by) - Number(ay)\n\n      if (ydiff !== 0) return ydiff\n      return Number(bm) - Number(am)\n    })\n  }, [data?.perMonthData.months])\n\n  if (error) return <ErrorDisplay />\n  if (noData)\n    return (\n      <ErrorDisplay message=\"Sin estadísticas. Aún no hay números cargados para este territorio.\" />\n    )\n  if (isLoading || !data) return <Spinner fulfill container />\n\n  const { generalData, perMonthData, perDayData } = data\n\n  const formatDecimals = (n: number) => n.toFixed(2)\n\n  return (\n    <div className=\"container pt-3\">\n      <Breadcrumb items={breadcrumbItems} />\n      <h4 className=\"mb-4\">General</h4>\n\n      <div className=\"table-responsive\">\n        <table className=\"table table-bordered\">\n          <thead>\n            <tr>\n              <th>Números guardados</th>\n              <th>No visitar</th>\n              <th>Inexistentes</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{generalData.totalNumbers}</td>\n              <td>\n                {generalData.noCall} (\n                {formatDecimals(\n                  (generalData.noCall * 100) / generalData.totalNumbers\n                )}\n                %)\n              </td>\n              <td>\n                {generalData.nonExistent} (\n                {formatDecimals(\n                  (generalData.nonExistent * 100) / generalData.totalNumbers\n                )}\n                %)\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <hr />\n\n      <h4 className=\"mb-4\">Estadísticas por mes</h4>\n\n      <small>\n        El TA se calcula haciendo: Números únicos existentes / Números totales\n        existentes.\n      </small>\n      <div className=\"table-responsive\">\n        <table className=\"table table-bordered\">\n          <thead>\n            <tr>\n              <th>Mes</th>\n              <th>Llamadas</th>\n              <th>Números únicos</th>\n              <th>Números únicos existentes</th>\n              <th>Atendieron</th>\n              <th>Territorio abarcado</th>\n            </tr>\n          </thead>\n          <tbody>\n            {perMonthData.months.map((row, i) =>\n              row.date === '07/2020' ? (\n                <tr key={i}>\n                  <td>{row.date}</td>\n                  <td>{row.total + 2088}</td>\n                  <td>{row.different + 2088}</td>\n                  <td>{row.different + 2088 - row.inexistent}</td>\n                  <td>\n                    {row.answered} (\n                    {formatDecimals(\n                      (row.answered * 100) /\n                        (row.different + 2088 - row.inexistent)\n                    )}\n                    %)\n                  </td>\n                  <td>\n                    {formatDecimals(\n                      ((row.different + 2088 - row.inexistent) * 100) /\n                        perMonthData.totalValidNumbers\n                    )}\n                    %\n                  </td>\n                </tr>\n              ) : (\n                <tr key={i}>\n                  <td>{row.date}</td>\n                  <td>{row.total}</td>\n                  <td>{row.different}</td>\n                  <td>{row.different - row.inexistent}</td>\n                  <td>\n                    {row.answered} (\n                    {formatDecimals(\n                      (row.answered * 100) / (row.different - row.inexistent)\n                    )}\n                    %)\n                  </td>\n                  <td>\n                    {formatDecimals(\n                      ((row.different - row.inexistent) * 100) /\n                        perMonthData.totalValidNumbers\n                    )}\n                    %\n                  </td>\n                </tr>\n              )\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      <hr />\n\n      <h4 className=\"mb-4\">Estadísticas por día</h4>\n\n      <div className=\"table-responsive\">\n        <table className=\"table table-bordered\">\n          <thead>\n            <tr>\n              <th>Fecha</th>\n              <th>Total de llamadas</th>\n              <th>Números únicos</th>\n              <th>Atendieron</th>\n              <th>No visitar</th>\n              <th>Números inexistentes</th>\n              <th>Porcentaje de inexistentes</th>\n            </tr>\n          </thead>\n          <tbody>\n            {perDayData.map((row, i) => (\n              <tr key={i}>\n                <td>{row.date ?? 'Nunca llamados'}</td>\n                <td>{row.totalCalls}</td>\n                <td>{row.different}</td>\n                <td>{row.answered}</td>\n                <td>{row.noCall ?? '-'}</td>\n                <td>{row.nonExistent ?? '-'}</td>\n                <td>\n                  {row.date\n                    ? Math.round((row.nonExistent * 100) / row.different) + '%'\n                    : '-'}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nexport { StatisticsPanel }\n"],"sourceRoot":""}